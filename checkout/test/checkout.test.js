const request = require("supertest");
const app = require("../server"); 

describe("ðŸ§ª Test de Checkout API", () => {

  const manualUser = 1;         // Tiene historial vÃ¡lido y auto_checkout_enabled activado o no importa
  const autoUser = 2;           // Tiene historial vÃ¡lido y auto_checkout_enabled = 1
  const disabledAutoUser = 3;   // Tiene historial vÃ¡lido pero auto_checkout_enabled = 0
  const noHistoryUser = 9999;   // Usuario sin historial

  test("ðŸš« Rechaza si falta userId", async () => {
    const res = await request(app).post("/checkout").send({});
    expect(res.statusCode).toBe(400);
    expect(res.body.error).toMatch(/userId/i);
  });

  test("ðŸš« Rechaza checkout automÃ¡tico si auto_checkout_enabled estÃ¡ desactivado", async () => {
    const res = await request(app).post("/checkout").send({
      userId: disabledAutoUser,
      type: "automatic",
    });

    expect(res.statusCode).toBe(403);
    expect(res.body.message).toMatch(/desactivado/i);
  });

  test("ðŸ“‹ Rechaza checkout si el usuario no tiene historial", async () => {
    const res = await request(app).post("/checkout").send({
      userId: noHistoryUser,
      type: "manual",
    });

    expect(res.statusCode).toBe(404);
    expect(res.body.message).toMatch(/historial/i);
  });

  test("âœ… Realiza checkout manual exitosamente", async () => {
    const res = await request(app).post("/checkout").send({
      userId: manualUser,
      type: "manual",
    });

    expect(res.statusCode).toBe(200);
    expect(res.body.data).toHaveProperty("checkoutTime");
    expect(res.body.message).toMatch(/Ã©xito/i);
  });

  test("âœ… Realiza checkout automÃ¡tico exitosamente", async () => {
    const res = await request(app).post("/checkout").send({
      userId: autoUser,
      type: "automatic",
    });

    expect(res.statusCode).toBe(200);
    expect(res.body.data).toHaveProperty("checkoutTime");
    expect(res.body.data.type).toBe("automatic");
  });
});
